#!/usr/bin/perl

use POSIX;
use strict;
use Sphinx::Search;
use Data::Dumper;
use Getopt::Long;

use vars qw($opt_W $opt_C $opt_w $opt_c $opt_h $opt_q $opt_H $opt_t %ERRORS $sph $results $status);

sub print_help ();
sub process_arguments ();

$status = process_arguments();

if ($status) {
 print "ERROR: processing arguments\n";
 exit $ERRORS{"UNKNOWN"};
}


$SIG{'ALRM'} = sub {
        print ("ERROR: timed out waiting for sphinx \n");
        exit $ERRORS{"WARNING"};
};
alarm($opt_t);


######################## MAIN ######################

$sph = Sphinx::Search->new();
$sph->SetServer($opt_H, '9312');

if( $sph->IsConnectError ) {
 print "SPHINX ERROR - found : Praha ", $sph->GetLastError,"\n";
 exit();
}

$sph->SetLimits(0, 0);
$sph->SetMaxQueryTime($opt_t);
$sph->SetRankingMode(SPH_RANK_NONE);

$results = $sph->SetMatchMode(SPH_MATCH_ALL)
  ->SetSortMode(SPH_SORT_RELEVANCE)
  ->Query($opt_q);

#print Dumper $sph->Status();
#print Dumper $results;

if ( $$results{error} ) {
 print "CRITICAL: ", $sph->GetLastError, "\n";
 exit $ERRORS{'CRITICAL'};
} elsif ( $$results{total_found} < $opt_c ) {
 print "CRITICAL: $opt_q ", $$results{total_found}, "\n";
 exit $ERRORS{'CRITICAL'};
}

print "OK: $opt_q ", $$results{total_found}, "\n";
exit $ERRORS{'OK'};



sub process_arguments(){
        GetOptions
                (
                 "h"   => \$opt_h, "help" => \$opt_h,
                 "w=i" => \$opt_w, "warning=i"  => \$opt_w,   # warning if above this number
                 "c=i" => \$opt_c, "critical=i" => \$opt_c,       # critical if above this number
                 "q=s" => \$opt_q, "query=s" => \$opt_q,       # Query for searching
                 "t=i" => \$opt_t, "timeout=i" => \$opt_t,       # Global timeout
                 "H=s" => \$opt_H, "host=s" => \$opt_H       # Global timeout
                 );

        if ($opt_h) {
                print_help();
                exit $ERRORS{'OK'};
        }
        if ( $opt_w >= $opt_c) {
                print "Warning (-w) cannot be greater than Critical (-c)!\n";
                exit $ERRORS{'UNKNOWN'};
        }

        unless (  defined $opt_w &&  defined $opt_c ) {
                print_usage();
                exit $ERRORS{'UNKNOWN'};
        }

        unless (defined $opt_t) {
                $opt_t = 1000 ;      # default timeout
        }

        unless (defined $opt_q) {
                $opt_q = "Prague" ;      # default query
        }

        unless (defined $opt_H) {
                $opt_H = "127.0.0.1" ;      # default query
        }



	return $ERRORS{'OK'};
}

sub print_usage () {
        print "Usage: check_sphinx_query -w <warn> -c <crit> -s <server IP/Name> -q <query> -t <timeout>\n";
}

sub print_help () {
        print "Copyright (c) 2012 Wikidi, a.s. by Ondrej Prochazka\n";
        print "\n";
        print_usage();
        print "\n";
        print "   Checks the number of founded results for query\n";
        print "-w (--warning)   = Min. number of results in queue to generate warning\n";
        print "-c (--critical)  = Min. number of results in queue to generate critical alert ( w < c )\n";
        print "-q (--query) = 'Prague' by default\n";
        print "-H (--host) = Server name or IP(default 127.0.0.1)\n";
        print "-t (--timeout)  = Set server connection timeout(1000 by default).\n";
        print "-h (--help)\n";
        print "\n\n"; 
        print "Note: -w and -c are required arguments.\n";
        print " -q query string like 'Prague'\n";
        print "\n\n";
}

